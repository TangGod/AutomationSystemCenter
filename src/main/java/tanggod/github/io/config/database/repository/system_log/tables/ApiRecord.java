/*
 * This file is generated by jOOQ.
*/
package tanggod.github.io.config.database.repository.system_log.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tanggod.github.io.config.database.repository.system_log.Indexes;
import tanggod.github.io.config.database.repository.system_log.Keys;
import tanggod.github.io.config.database.repository.system_log.SystemLog;
import tanggod.github.io.config.database.repository.system_log.tables.records.ApiRecordRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApiRecord extends TableImpl<ApiRecordRecord> {

    private static final long serialVersionUID = 1230978475;

    /**
     * The reference instance of <code>system_log.api_record</code>
     */
    public static final ApiRecord API_RECORD = new ApiRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApiRecordRecord> getRecordType() {
        return ApiRecordRecord.class;
    }

    /**
     * The column <code>system_log.api_record.id</code>.
     */
    public final TableField<ApiRecordRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>system_log.api_record.code</code>.
     */
    public final TableField<ApiRecordRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>system_log.api_record.msg</code>.
     */
    public final TableField<ApiRecordRecord, String> MSG = createField("msg", org.jooq.impl.SQLDataType.VARCHAR(10000), this, "");

    /**
     * The column <code>system_log.api_record.type_id</code>.
     */
    public final TableField<ApiRecordRecord, String> TYPE_ID = createField("type_id", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>system_log.api_record.type_name</code>.
     */
    public final TableField<ApiRecordRecord, String> TYPE_NAME = createField("type_name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>system_log.api_record.remark</code>.
     */
    public final TableField<ApiRecordRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>system_log.api_record.create_date</code>.
     */
    public final TableField<ApiRecordRecord, Timestamp> CREATE_DATE = createField("create_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>system_log.api_record</code> table reference
     */
    public ApiRecord() {
        this(DSL.name("api_record"), null);
    }

    /**
     * Create an aliased <code>system_log.api_record</code> table reference
     */
    public ApiRecord(String alias) {
        this(DSL.name(alias), API_RECORD);
    }

    /**
     * Create an aliased <code>system_log.api_record</code> table reference
     */
    public ApiRecord(Name alias) {
        this(alias, API_RECORD);
    }

    private ApiRecord(Name alias, Table<ApiRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApiRecord(Name alias, Table<ApiRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SystemLog.SYSTEM_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.API_RECORD_1, Indexes.API_RECORD_2, Indexes.API_RECORD_3, Indexes.API_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ApiRecordRecord> getPrimaryKey() {
        return Keys.KEY_API_RECORD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ApiRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<ApiRecordRecord>>asList(Keys.KEY_API_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ApiRecord as(String alias) {
        return new ApiRecord(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ApiRecord as(Name alias) {
        return new ApiRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiRecord rename(String name) {
        return new ApiRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiRecord rename(Name name) {
        return new ApiRecord(name, null);
    }
}
