/*
 * This file is generated by jOOQ.
*/
package tanggod.github.io.config.database.repository.wish_api.tables.records;


import java.math.BigDecimal;
import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import tanggod.github.io.config.database.repository.wish_api.tables.Order;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderRecord extends UpdatableRecordImpl<OrderRecord> {

    private static final long serialVersionUID = 1202487227;

    /**
     * Setter for <code>wish_api.order.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>wish_api.order.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>wish_api.order.auth_code</code>. 授权编码
     */
    public void setAuthCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>wish_api.order.auth_code</code>. 授权编码
     */
    public String getAuthCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>wish_api.order.transaction_date</code>. 订单时间
     */
    public void setTransactionDate(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>wish_api.order.transaction_date</code>. 订单时间
     */
    public Timestamp getTransactionDate() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>wish_api.order.order_id</code>. 订单ID
     */
    public void setOrderId(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>wish_api.order.order_id</code>. 订单ID
     */
    public String getOrderId() {
        return (String) get(3);
    }

    /**
     * Setter for <code>wish_api.order.transaction_iD</code>. 交易编号 (暂时没什么用) 如果用户一次进行多次购买，则可以将订单分为唯一的标识符
     */
    public void setTransactionId(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>wish_api.order.transaction_iD</code>. 交易编号 (暂时没什么用) 如果用户一次进行多次购买，则可以将订单分为唯一的标识符
     */
    public String getTransactionId() {
        return (String) get(4);
    }

    /**
     * Setter for <code>wish_api.order.order_state</code>. 订单状态
     */
    public void setOrderState(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>wish_api.order.order_state</code>. 订单状态
     */
    public String getOrderState() {
        return (String) get(5);
    }

    /**
     * Setter for <code>wish_api.order.sku</code>. 产品的 子sku
     */
    public void setSku(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>wish_api.order.sku</code>. 产品的 子sku
     */
    public String getSku() {
        return (String) get(6);
    }

    /**
     * Setter for <code>wish_api.order.product_id</code>. 产品id
     */
    public void setProductId(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>wish_api.order.product_id</code>. 产品id
     */
    public String getProductId() {
        return (String) get(7);
    }

    /**
     * Setter for <code>wish_api.order.product_link</code>. 产品的 wish链接
     */
    public void setProductLink(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>wish_api.order.product_link</code>. 产品的 wish链接
     */
    public String getProductLink() {
        return (String) get(8);
    }

    /**
     * Setter for <code>wish_api.order.product_image_url</code>. 产品主图URL
     */
    public void setProductImageUrl(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>wish_api.order.product_image_url</code>. 产品主图URL
     */
    public String getProductImageUrl() {
        return (String) get(9);
    }

    /**
     * Setter for <code>wish_api.order.size</code>. 尺码
     */
    public void setSize(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>wish_api.order.size</code>. 尺码
     */
    public String getSize() {
        return (String) get(10);
    }

    /**
     * Setter for <code>wish_api.order.color</code>. 颜色
     */
    public void setColor(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>wish_api.order.color</code>. 颜色
     */
    public String getColor() {
        return (String) get(11);
    }

    /**
     * Setter for <code>wish_api.order.currency_code</code>. 货币代码
     */
    public void setCurrencyCode(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>wish_api.order.currency_code</code>. 货币代码
     */
    public String getCurrencyCode() {
        return (String) get(12);
    }

    /**
     * Setter for <code>wish_api.order.price_each</code>. 单件 - 没扣除佣金的价格   （金额币种:按货币代码来）
     */
    public void setPriceEach(BigDecimal value) {
        set(13, value);
    }

    /**
     * Getter for <code>wish_api.order.price_each</code>. 单件 - 没扣除佣金的价格   （金额币种:按货币代码来）
     */
    public BigDecimal getPriceEach() {
        return (BigDecimal) get(13);
    }

    /**
     * Setter for <code>wish_api.order.cost_each</code>. 单件 - 扣除0.85佣金的价格（到手价格）   （金额币种:按货币代码来）
     */
    public void setCostEach(BigDecimal value) {
        set(14, value);
    }

    /**
     * Getter for <code>wish_api.order.cost_each</code>. 单件 - 扣除0.85佣金的价格（到手价格）   （金额币种:按货币代码来）
     */
    public BigDecimal getCostEach() {
        return (BigDecimal) get(14);
    }

    /**
     * Setter for <code>wish_api.order.shipping_each</code>. 单件 - 没扣除佣金的运费    （金额币种:按货币代码来）
     */
    public void setShippingEach(BigDecimal value) {
        set(15, value);
    }

    /**
     * Getter for <code>wish_api.order.shipping_each</code>. 单件 - 没扣除佣金的运费    （金额币种:按货币代码来）
     */
    public BigDecimal getShippingEach() {
        return (BigDecimal) get(15);
    }

    /**
     * Setter for <code>wish_api.order.shipping_cost</code>. 单件 - 扣除0.85佣金的运费（到手运费）   （金额币种:按货币代码来）
     */
    public void setShippingCost(BigDecimal value) {
        set(16, value);
    }

    /**
     * Getter for <code>wish_api.order.shipping_cost</code>. 单件 - 扣除0.85佣金的运费（到手运费）   （金额币种:按货币代码来）
     */
    public BigDecimal getShippingCost() {
        return (BigDecimal) get(16);
    }

    /**
     * Setter for <code>wish_api.order.quantity</code>. 订单数量     （金额币种:按货币代码来）
     */
    public void setQuantity(Integer value) {
        set(17, value);
    }

    /**
     * Getter for <code>wish_api.order.quantity</code>. 订单数量     （金额币种:按货币代码来）
     */
    public Integer getQuantity() {
        return (Integer) get(17);
    }

    /**
     * Setter for <code>wish_api.order.total_cost</code>. 多件 - 扣除0.85佣金的订单金额 计算公式 ： (costEach+shippingCost)*quantity  （金额币种:按货币代码来）
     */
    public void setTotalCost(BigDecimal value) {
        set(18, value);
    }

    /**
     * Getter for <code>wish_api.order.total_cost</code>. 多件 - 扣除0.85佣金的订单金额 计算公式 ： (costEach+shippingCost)*quantity  （金额币种:按货币代码来）
     */
    public BigDecimal getTotalCost() {
        return (BigDecimal) get(18);
    }

    /**
     * Setter for <code>wish_api.order.available_for_fulfillment_time</code>. 订单时间  格式: (06-11-2020 13:32)
     */
    public void setAvailableForFulfillmentTime(Timestamp value) {
        set(19, value);
    }

    /**
     * Getter for <code>wish_api.order.available_for_fulfillment_time</code>. 订单时间  格式: (06-11-2020 13:32)
     */
    public Timestamp getAvailableForFulfillmentTime() {
        return (Timestamp) get(19);
    }

    /**
     * Setter for <code>wish_api.order.shipped_on</code>. 发货时间
     */
    public void setShippedOn(Timestamp value) {
        set(20, value);
    }

    /**
     * Getter for <code>wish_api.order.shipped_on</code>. 发货时间
     */
    public Timestamp getShippedOn() {
        return (Timestamp) get(20);
    }

    /**
     * Setter for <code>wish_api.order.confirmed_delivery</code>. 物流是否确认妥投    ConfirmedDeliveryEnum
     */
    public void setConfirmedDelivery(Boolean value) {
        set(21, value);
    }

    /**
     * Getter for <code>wish_api.order.confirmed_delivery</code>. 物流是否确认妥投    ConfirmedDeliveryEnum
     */
    public Boolean getConfirmedDelivery() {
        return (Boolean) get(21);
    }

    /**
     * Setter for <code>wish_api.order.date_shipping_carrier_confirmed_delivery</code>. 妥投日期     没有妥投 数据则为 空
     */
    public void setDateShippingCarrierConfirmedDelivery(Timestamp value) {
        set(22, value);
    }

    /**
     * Getter for <code>wish_api.order.date_shipping_carrier_confirmed_delivery</code>. 妥投日期     没有妥投 数据则为 空
     */
    public Timestamp getDateShippingCarrierConfirmedDelivery() {
        return (Timestamp) get(22);
    }

    /**
     * Setter for <code>wish_api.order.provider</code>. 物流提供者
     */
    public void setProvider(String value) {
        set(23, value);
    }

    /**
     * Getter for <code>wish_api.order.provider</code>. 物流提供者
     */
    public String getProvider() {
        return (String) get(23);
    }

    /**
     * Setter for <code>wish_api.order.tracking</code>. 追踪号
     */
    public void setTracking(String value) {
        set(24, value);
    }

    /**
     * Getter for <code>wish_api.order.tracking</code>. 追踪号
     */
    public String getTracking() {
        return (String) get(24);
    }

    /**
     * Setter for <code>wish_api.order.tracking_confirmed</code>. 跟踪号:是否有头程信息
     */
    public void setTrackingConfirmed(Boolean value) {
        set(25, value);
    }

    /**
     * Getter for <code>wish_api.order.tracking_confirmed</code>. 跟踪号:是否有头程信息
     */
    public Boolean getTrackingConfirmed() {
        return (Boolean) get(25);
    }

    /**
     * Setter for <code>wish_api.order.tracking_confirmed_date</code>. 跟踪号:头程信息日期
     */
    public void setTrackingConfirmedDate(Timestamp value) {
        set(26, value);
    }

    /**
     * Getter for <code>wish_api.order.tracking_confirmed_date</code>. 跟踪号:头程信息日期
     */
    public Timestamp getTrackingConfirmedDate() {
        return (Timestamp) get(26);
    }

    /**
     * Setter for <code>wish_api.order.last_updated</code>. 最近更新时间
     */
    public void setLastUpdated(Timestamp value) {
        set(27, value);
    }

    /**
     * Getter for <code>wish_api.order.last_updated</code>. 最近更新时间
     */
    public Timestamp getLastUpdated() {
        return (Timestamp) get(27);
    }

    /**
     * Setter for <code>wish_api.order.country_code</code>. 国家代码
     */
    public void setCountryCode(String value) {
        set(28, value);
    }

    /**
     * Getter for <code>wish_api.order.country_code</code>. 国家代码
     */
    public String getCountryCode() {
        return (String) get(28);
    }

    /**
     * Setter for <code>wish_api.order.refund_responsibility</code>. 退款责任百分比  0 - 100
     */
    public void setRefundResponsibility(Integer value) {
        set(29, value);
    }

    /**
     * Getter for <code>wish_api.order.refund_responsibility</code>. 退款责任百分比  0 - 100
     */
    public Integer getRefundResponsibility() {
        return (Integer) get(29);
    }

    /**
     * Setter for <code>wish_api.order.refund_responsibility_amount</code>. 退款责任金额     （金额币种:按货币代码来）
     */
    public void setRefundResponsibilityAmount(BigDecimal value) {
        set(30, value);
    }

    /**
     * Getter for <code>wish_api.order.refund_responsibility_amount</code>. 退款责任金额     （金额币种:按货币代码来）
     */
    public BigDecimal getRefundResponsibilityAmount() {
        return (BigDecimal) get(30);
    }

    /**
     * Setter for <code>wish_api.order.refund_date</code>. 退款日期
     */
    public void setRefundDate(Timestamp value) {
        set(31, value);
    }

    /**
     * Getter for <code>wish_api.order.refund_date</code>. 退款日期
     */
    public Timestamp getRefundDate() {
        return (Timestamp) get(31);
    }

    /**
     * Setter for <code>wish_api.order.refund_reason</code>. 退款原因
     */
    public void setRefundReason(String value) {
        set(32, value);
    }

    /**
     * Getter for <code>wish_api.order.refund_reason</code>. 退款原因
     */
    public String getRefundReason() {
        return (String) get(32);
    }

    /**
     * Setter for <code>wish_api.order.advanced_logistics</code>. A + 物流
     */
    public void setAdvancedLogistics(Boolean value) {
        set(33, value);
    }

    /**
     * Getter for <code>wish_api.order.advanced_logistics</code>. A + 物流
     */
    public Boolean getAdvancedLogistics() {
        return (Boolean) get(33);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OrderRecord
     */
    public OrderRecord() {
        super(Order.ORDER);
    }

    /**
     * Create a detached, initialised OrderRecord
     */
    public OrderRecord(String id, String authCode, Timestamp transactionDate, String orderId, String transactionId, String orderState, String sku, String productId, String productLink, String productImageUrl, String size, String color, String currencyCode, BigDecimal priceEach, BigDecimal costEach, BigDecimal shippingEach, BigDecimal shippingCost, Integer quantity, BigDecimal totalCost, Timestamp availableForFulfillmentTime, Timestamp shippedOn, Boolean confirmedDelivery, Timestamp dateShippingCarrierConfirmedDelivery, String provider, String tracking, Boolean trackingConfirmed, Timestamp trackingConfirmedDate, Timestamp lastUpdated, String countryCode, Integer refundResponsibility, BigDecimal refundResponsibilityAmount, Timestamp refundDate, String refundReason, Boolean advancedLogistics) {
        super(Order.ORDER);

        set(0, id);
        set(1, authCode);
        set(2, transactionDate);
        set(3, orderId);
        set(4, transactionId);
        set(5, orderState);
        set(6, sku);
        set(7, productId);
        set(8, productLink);
        set(9, productImageUrl);
        set(10, size);
        set(11, color);
        set(12, currencyCode);
        set(13, priceEach);
        set(14, costEach);
        set(15, shippingEach);
        set(16, shippingCost);
        set(17, quantity);
        set(18, totalCost);
        set(19, availableForFulfillmentTime);
        set(20, shippedOn);
        set(21, confirmedDelivery);
        set(22, dateShippingCarrierConfirmedDelivery);
        set(23, provider);
        set(24, tracking);
        set(25, trackingConfirmed);
        set(26, trackingConfirmedDate);
        set(27, lastUpdated);
        set(28, countryCode);
        set(29, refundResponsibility);
        set(30, refundResponsibilityAmount);
        set(31, refundDate);
        set(32, refundReason);
        set(33, advancedLogistics);
    }
}
