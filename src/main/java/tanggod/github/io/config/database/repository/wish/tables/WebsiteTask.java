/*
 * This file is generated by jOOQ.
*/
package tanggod.github.io.config.database.repository.wish.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tanggod.github.io.config.database.repository.wish.Indexes;
import tanggod.github.io.config.database.repository.wish.Keys;
import tanggod.github.io.config.database.repository.wish.Wish;
import tanggod.github.io.config.database.repository.wish.tables.records.WebsiteTaskRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WebsiteTask extends TableImpl<WebsiteTaskRecord> {

    private static final long serialVersionUID = 358421791;

    /**
     * The reference instance of <code>wish.website_task</code>
     */
    public static final WebsiteTask WEBSITE_TASK = new WebsiteTask();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WebsiteTaskRecord> getRecordType() {
        return WebsiteTaskRecord.class;
    }

    /**
     * The column <code>wish.website_task.id</code>.
     */
    public final TableField<WebsiteTaskRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>wish.website_task.website_address_id</code>.
     */
    public final TableField<WebsiteTaskRecord, String> WEBSITE_ADDRESS_ID = createField("website_address_id", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>wish.website_task.createDate</code>.
     */
    public final TableField<WebsiteTaskRecord, Timestamp> CREATEDATE = createField("createDate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>wish.website_task.remark</code>.
     */
    public final TableField<WebsiteTaskRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>wish.website_task.domainn_name</code>.
     */
    public final TableField<WebsiteTaskRecord, String> DOMAINN_NAME = createField("domainn_name", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>wish.website_task.task_url</code>.
     */
    public final TableField<WebsiteTaskRecord, String> TASK_URL = createField("task_url", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>wish.website_task.status</code>.
     */
    public final TableField<WebsiteTaskRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>wish.website_task.sku</code>.
     */
    public final TableField<WebsiteTaskRecord, String> SKU = createField("sku", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>wish.website_task.updateDate</code>.
     */
    public final TableField<WebsiteTaskRecord, Timestamp> UPDATEDATE = createField("updateDate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>wish.website_task</code> table reference
     */
    public WebsiteTask() {
        this(DSL.name("website_task"), null);
    }

    /**
     * Create an aliased <code>wish.website_task</code> table reference
     */
    public WebsiteTask(String alias) {
        this(DSL.name(alias), WEBSITE_TASK);
    }

    /**
     * Create an aliased <code>wish.website_task</code> table reference
     */
    public WebsiteTask(Name alias) {
        this(alias, WEBSITE_TASK);
    }

    private WebsiteTask(Name alias, Table<WebsiteTaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private WebsiteTask(Name alias, Table<WebsiteTaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Wish.WISH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WEBSITE_TASK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WebsiteTaskRecord> getPrimaryKey() {
        return Keys.KEY_WEBSITE_TASK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WebsiteTaskRecord>> getKeys() {
        return Arrays.<UniqueKey<WebsiteTaskRecord>>asList(Keys.KEY_WEBSITE_TASK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WebsiteTask as(String alias) {
        return new WebsiteTask(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WebsiteTask as(Name alias) {
        return new WebsiteTask(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WebsiteTask rename(String name) {
        return new WebsiteTask(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WebsiteTask rename(Name name) {
        return new WebsiteTask(name, null);
    }
}
