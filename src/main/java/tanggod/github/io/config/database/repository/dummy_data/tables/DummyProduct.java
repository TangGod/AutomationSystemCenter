/*
 * This file is generated by jOOQ.
*/
package tanggod.github.io.config.database.repository.dummy_data.tables;


import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tanggod.github.io.config.database.repository.dummy_data.DummyData;
import tanggod.github.io.config.database.repository.dummy_data.Indexes;
import tanggod.github.io.config.database.repository.dummy_data.Keys;
import tanggod.github.io.config.database.repository.dummy_data.tables.records.DummyProductRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DummyProduct extends TableImpl<DummyProductRecord> {

    private static final long serialVersionUID = -452977510;

    /**
     * The reference instance of <code>dummy_data.dummy_product</code>
     */
    public static final DummyProduct DUMMY_PRODUCT = new DummyProduct();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DummyProductRecord> getRecordType() {
        return DummyProductRecord.class;
    }

    /**
     * The column <code>dummy_data.dummy_product.id</code>.
     */
    public final TableField<DummyProductRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>dummy_data.dummy_product.product_id</code>. 产品ID
     */
    public final TableField<DummyProductRecord, String> PRODUCT_ID = createField("product_id", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "产品ID");

    /**
     * The column <code>dummy_data.dummy_product.product_sku</code>. 产品sku
     */
    public final TableField<DummyProductRecord, String> PRODUCT_SKU = createField("product_sku", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "产品sku");

    /**
     * The column <code>dummy_data.dummy_product.product_profit_margin</code>. 产品利润率
     */
    public final TableField<DummyProductRecord, Integer> PRODUCT_PROFIT_MARGIN = createField("product_profit_margin", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "产品利润率");

    /**
     * The column <code>dummy_data.dummy_product.product_cost</code>. 产品成本
     */
    public final TableField<DummyProductRecord, BigDecimal> PRODUCT_COST = createField("product_cost", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "产品成本");

    /**
     * The column <code>dummy_data.dummy_product.product_weight</code>. 产品重量
     */
    public final TableField<DummyProductRecord, Integer> PRODUCT_WEIGHT = createField("product_weight", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "产品重量");

    /**
     * The column <code>dummy_data.dummy_product.authCode</code>. 店铺名
     */
    public final TableField<DummyProductRecord, String> AUTHCODE = createField("authCode", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "店铺名");

    /**
     * The column <code>dummy_data.dummy_product.color_list</code>. 颜色列表 ，用","分割
     */
    public final TableField<DummyProductRecord, String> COLOR_LIST = createField("color_list", org.jooq.impl.SQLDataType.VARCHAR(5000).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "颜色列表 ，用\",\"分割");

    /**
     * The column <code>dummy_data.dummy_product.create_date</code>. 创建时间
     */
    public final TableField<DummyProductRecord, Timestamp> CREATE_DATE = createField("create_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>dummy_data.dummy_product.order_count</code>. 要生成的订单数
     */
    public final TableField<DummyProductRecord, Integer> ORDER_COUNT = createField("order_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "要生成的订单数");

    /**
     * The column <code>dummy_data.dummy_product.size_list</code>. 尺码列表 , 分割
     */
    public final TableField<DummyProductRecord, String> SIZE_LIST = createField("size_list", org.jooq.impl.SQLDataType.VARCHAR(1000).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "尺码列表 , 分割");

    /**
     * The column <code>dummy_data.dummy_product.order_status</code>.
     */
    public final TableField<DummyProductRecord, String> ORDER_STATUS = createField("order_status", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>dummy_data.dummy_product.items_probability</code>.
     */
    public final TableField<DummyProductRecord, Integer> ITEMS_PROBABILITY = createField("items_probability", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>dummy_data.dummy_product.merge_probability</code>.
     */
    public final TableField<DummyProductRecord, Integer> MERGE_PROBABILITY = createField("merge_probability", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>dummy_data.dummy_product.supply_list</code>.
     */
    public final TableField<DummyProductRecord, String> SUPPLY_LIST = createField("supply_list", org.jooq.impl.SQLDataType.VARCHAR(5000).nullable(false), this, "");

    /**
     * Create a <code>dummy_data.dummy_product</code> table reference
     */
    public DummyProduct() {
        this(DSL.name("dummy_product"), null);
    }

    /**
     * Create an aliased <code>dummy_data.dummy_product</code> table reference
     */
    public DummyProduct(String alias) {
        this(DSL.name(alias), DUMMY_PRODUCT);
    }

    /**
     * Create an aliased <code>dummy_data.dummy_product</code> table reference
     */
    public DummyProduct(Name alias) {
        this(alias, DUMMY_PRODUCT);
    }

    private DummyProduct(Name alias, Table<DummyProductRecord> aliased) {
        this(alias, aliased, null);
    }

    private DummyProduct(Name alias, Table<DummyProductRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DummyData.DUMMY_DATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DUMMY_PRODUCT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DummyProductRecord> getPrimaryKey() {
        return Keys.KEY_DUMMY_PRODUCT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DummyProductRecord>> getKeys() {
        return Arrays.<UniqueKey<DummyProductRecord>>asList(Keys.KEY_DUMMY_PRODUCT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DummyProduct as(String alias) {
        return new DummyProduct(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DummyProduct as(Name alias) {
        return new DummyProduct(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DummyProduct rename(String name) {
        return new DummyProduct(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DummyProduct rename(Name name) {
        return new DummyProduct(name, null);
    }
}
