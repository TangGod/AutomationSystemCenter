/*
 * This file is generated by jOOQ.
*/
package tanggod.github.io.config.database.repository.system_log;


import javax.annotation.Generated;

import org.jooq.UniqueKey;
import org.jooq.impl.Internal;

import tanggod.github.io.config.database.repository.system_log.tables.ApiRecord;
import tanggod.github.io.config.database.repository.system_log.tables.Type;
import tanggod.github.io.config.database.repository.system_log.tables.records.ApiRecordRecord;
import tanggod.github.io.config.database.repository.system_log.tables.records.TypeRecord;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>system_log</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ApiRecordRecord> KEY_API_RECORD_PRIMARY = UniqueKeys0.KEY_API_RECORD_PRIMARY;
    public static final UniqueKey<TypeRecord> KEY_TYPE_PRIMARY = UniqueKeys0.KEY_TYPE_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class UniqueKeys0 {
        public static final UniqueKey<ApiRecordRecord> KEY_API_RECORD_PRIMARY = Internal.createUniqueKey(ApiRecord.API_RECORD, "KEY_api_record_PRIMARY", ApiRecord.API_RECORD.ID);
        public static final UniqueKey<TypeRecord> KEY_TYPE_PRIMARY = Internal.createUniqueKey(Type.TYPE, "KEY_type_PRIMARY", Type.TYPE.ID);
    }
}
