/*
 * This file is generated by jOOQ.
*/
package tanggod.github.io.config.database.repository.oauth.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tanggod.github.io.config.database.repository.oauth.Indexes;
import tanggod.github.io.config.database.repository.oauth.Keys;
import tanggod.github.io.config.database.repository.oauth.Oauth;
import tanggod.github.io.config.database.repository.oauth.tables.records.WishpostRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Wishpost extends TableImpl<WishpostRecord> {

    private static final long serialVersionUID = 1807893283;

    /**
     * The reference instance of <code>OAuth.wishpost</code>
     */
    public static final Wishpost WISHPOST = new Wishpost();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WishpostRecord> getRecordType() {
        return WishpostRecord.class;
    }

    /**
     * The column <code>OAuth.wishpost.id</code>.
     */
    public final TableField<WishpostRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>OAuth.wishpost.client_id</code>.
     */
    public final TableField<WishpostRecord, String> CLIENT_ID = createField("client_id", org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>OAuth.wishpost.client_secret</code>.
     */
    public final TableField<WishpostRecord, String> CLIENT_SECRET = createField("client_secret", org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>OAuth.wishpost.access_token</code>.
     */
    public final TableField<WishpostRecord, String> ACCESS_TOKEN = createField("access_token", org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>OAuth.wishpost.auth_code</code>.
     */
    public final TableField<WishpostRecord, String> AUTH_CODE = createField("auth_code", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>OAuth.wishpost.refresh_token</code>.
     */
    public final TableField<WishpostRecord, String> REFRESH_TOKEN = createField("refresh_token", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>OAuth.wishpost.access_token_expiry_time</code>.
     */
    public final TableField<WishpostRecord, Timestamp> ACCESS_TOKEN_EXPIRY_TIME = createField("access_token_expiry_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>OAuth.wishpost.refresh_token_expiry_time</code>.
     */
    public final TableField<WishpostRecord, Timestamp> REFRESH_TOKEN_EXPIRY_TIME = createField("refresh_token_expiry_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>OAuth.wishpost.scope</code>.
     */
    public final TableField<WishpostRecord, String> SCOPE = createField("scope", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * Create a <code>OAuth.wishpost</code> table reference
     */
    public Wishpost() {
        this(DSL.name("wishpost"), null);
    }

    /**
     * Create an aliased <code>OAuth.wishpost</code> table reference
     */
    public Wishpost(String alias) {
        this(DSL.name(alias), WISHPOST);
    }

    /**
     * Create an aliased <code>OAuth.wishpost</code> table reference
     */
    public Wishpost(Name alias) {
        this(alias, WISHPOST);
    }

    private Wishpost(Name alias, Table<WishpostRecord> aliased) {
        this(alias, aliased, null);
    }

    private Wishpost(Name alias, Table<WishpostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Oauth.OAUTH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WISHPOST_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WishpostRecord> getPrimaryKey() {
        return Keys.KEY_WISHPOST_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WishpostRecord>> getKeys() {
        return Arrays.<UniqueKey<WishpostRecord>>asList(Keys.KEY_WISHPOST_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Wishpost as(String alias) {
        return new Wishpost(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Wishpost as(Name alias) {
        return new Wishpost(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Wishpost rename(String name) {
        return new Wishpost(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Wishpost rename(Name name) {
        return new Wishpost(name, null);
    }
}
