/*
 * This file is generated by jOOQ.
*/
package tanggod.github.io.config.database.repository.wish.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tanggod.github.io.config.database.repository.wish.Indexes;
import tanggod.github.io.config.database.repository.wish.Keys;
import tanggod.github.io.config.database.repository.wish.Wish;
import tanggod.github.io.config.database.repository.wish.tables.records.CollectionDataUserRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CollectionDataUser extends TableImpl<CollectionDataUserRecord> {

    private static final long serialVersionUID = 1413543150;

    /**
     * The reference instance of <code>wish.collection_data_user</code>
     */
    public static final CollectionDataUser COLLECTION_DATA_USER = new CollectionDataUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CollectionDataUserRecord> getRecordType() {
        return CollectionDataUserRecord.class;
    }

    /**
     * The column <code>wish.collection_data_user.id</code>.
     */
    public final TableField<CollectionDataUserRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>wish.collection_data_user.user_name</code>.
     */
    public final TableField<CollectionDataUserRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>wish.collection_data_user.password</code>.
     */
    public final TableField<CollectionDataUserRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>wish.collection_data_user.wish_category_id</code>.
     */
    public final TableField<CollectionDataUserRecord, String> WISH_CATEGORY_ID = createField("wish_category_id", org.jooq.impl.SQLDataType.VARCHAR(5000), this, "");

    /**
     * The column <code>wish.collection_data_user.permission</code>.
     */
    public final TableField<CollectionDataUserRecord, Integer> PERMISSION = createField("permission", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>wish.collection_data_user</code> table reference
     */
    public CollectionDataUser() {
        this(DSL.name("collection_data_user"), null);
    }

    /**
     * Create an aliased <code>wish.collection_data_user</code> table reference
     */
    public CollectionDataUser(String alias) {
        this(DSL.name(alias), COLLECTION_DATA_USER);
    }

    /**
     * Create an aliased <code>wish.collection_data_user</code> table reference
     */
    public CollectionDataUser(Name alias) {
        this(alias, COLLECTION_DATA_USER);
    }

    private CollectionDataUser(Name alias, Table<CollectionDataUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private CollectionDataUser(Name alias, Table<CollectionDataUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Wish.WISH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COLLECTION_DATA_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CollectionDataUserRecord> getPrimaryKey() {
        return Keys.KEY_COLLECTION_DATA_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CollectionDataUserRecord>> getKeys() {
        return Arrays.<UniqueKey<CollectionDataUserRecord>>asList(Keys.KEY_COLLECTION_DATA_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CollectionDataUser as(String alias) {
        return new CollectionDataUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CollectionDataUser as(Name alias) {
        return new CollectionDataUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CollectionDataUser rename(String name) {
        return new CollectionDataUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CollectionDataUser rename(Name name) {
        return new CollectionDataUser(name, null);
    }
}
