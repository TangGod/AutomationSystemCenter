/*
 * This file is generated by jOOQ.
*/
package tanggod.github.io.config.database.repository.wish_api.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tanggod.github.io.config.database.repository.wish_api.Indexes;
import tanggod.github.io.config.database.repository.wish_api.Keys;
import tanggod.github.io.config.database.repository.wish_api.WishApi;
import tanggod.github.io.config.database.repository.wish_api.tables.records.BatchBaseRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchBase extends TableImpl<BatchBaseRecord> {

    private static final long serialVersionUID = 574691214;

    /**
     * The reference instance of <code>wish_api.batch_base</code>
     */
    public static final BatchBase BATCH_BASE = new BatchBase();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchBaseRecord> getRecordType() {
        return BatchBaseRecord.class;
    }

    /**
     * The column <code>wish_api.batch_base.batch_code</code>.
     */
    public final TableField<BatchBaseRecord, String> BATCH_CODE = createField("batch_code", org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>wish_api.batch_base.auth_code</code>.
     */
    public final TableField<BatchBaseRecord, String> AUTH_CODE = createField("auth_code", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>wish_api.batch_base.create_date</code>.
     */
    public final TableField<BatchBaseRecord, Timestamp> CREATE_DATE = createField("create_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>wish_api.batch_base.status</code>.
     */
    public final TableField<BatchBaseRecord, Boolean> STATUS = createField("status", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>wish_api.batch_base.count</code>.
     */
    public final TableField<BatchBaseRecord, Integer> COUNT = createField("count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>wish_api.batch_base.processing_time</code>.
     */
    public final TableField<BatchBaseRecord, Integer> PROCESSING_TIME = createField("processing_time", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>wish_api.batch_base.msg</code>.
     */
    public final TableField<BatchBaseRecord, String> MSG = createField("msg", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>wish_api.batch_base.type</code>.
     */
    public final TableField<BatchBaseRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * Create a <code>wish_api.batch_base</code> table reference
     */
    public BatchBase() {
        this(DSL.name("batch_base"), null);
    }

    /**
     * Create an aliased <code>wish_api.batch_base</code> table reference
     */
    public BatchBase(String alias) {
        this(DSL.name(alias), BATCH_BASE);
    }

    /**
     * Create an aliased <code>wish_api.batch_base</code> table reference
     */
    public BatchBase(Name alias) {
        this(alias, BATCH_BASE);
    }

    private BatchBase(Name alias, Table<BatchBaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private BatchBase(Name alias, Table<BatchBaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return WishApi.WISH_API;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BATCH_BASE_1, Indexes.BATCH_BASE_2, Indexes.BATCH_BASE_3, Indexes.BATCH_BASE_4, Indexes.BATCH_BASE_5, Indexes.BATCH_BASE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BatchBaseRecord> getPrimaryKey() {
        return Keys.KEY_BATCH_BASE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BatchBaseRecord>> getKeys() {
        return Arrays.<UniqueKey<BatchBaseRecord>>asList(Keys.KEY_BATCH_BASE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BatchBase as(String alias) {
        return new BatchBase(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BatchBase as(Name alias) {
        return new BatchBase(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchBase rename(String name) {
        return new BatchBase(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchBase rename(Name name) {
        return new BatchBase(name, null);
    }
}
